{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAEaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,KAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCFjBC,G,YAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCN1BO,G,MAAY,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACrC,OACI,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC2CPG,E,kDA/Cb,aAAe,IAAD,8BACZ,gBAmBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAhBrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAPH,E,qDAcd,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAO1C,WAAS,MAK0BC,KAAKN,MAA9Bb,EALD,EAKCA,SAAUU,EALX,EAKWA,YACZU,EAAmBpB,EAASqB,QAAQ,SAAA3B,GAAO,OAAIA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAErG,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEW,YAAY,0BAIZC,aAAce,KAAKf,eACrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA1CVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.34b13908.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Card = props => {\n    return (\n        <div className=\"card-container\">\n            <img src={`https://robohash.org/${props.monster.id}$set=set3&size=180x180`} alt=\"\"/>\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p> \n        </div>\n        \n    )\n}","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\nimport '../card/card.styles.css';\n\nexport const CardList = props => {\n    return (\n        <div className=\"card-list\">\n            {\n                props.monsters.map(monster => (\n                    <Card key={monster.id} monster={monster}/>\n                ))\n            }\n        </div>\n    )\n}","import React from 'react';\nimport './search-box.styles.css';\n\n\nexport const SearchBox = ({ placeholder, handleChange}) => {\n    return (\n        <input \n            className=\"search\"\n            type=\"search\" \n            placeholder={placeholder}\n            onChange={handleChange}\n        />\n    )\n}","import './App.css';\nimport { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    //this represents the state, and in monsters element\n    // all the data from the API is stored, and eventually modified\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  //once the component gets mount, fetch the data from the API\n  // parse it to make it javascript compatible\n  // and last, use setState to assign it to the state\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n\n  render() {\n\n    //this gets runned every time the component is rendered(the component is rendered every time the state changes)\n    //so when searchField changes, filteredMonsters gets uptaded and gets passed to the lower component in the\n    //component gerarchy\n    const { monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter( monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    \n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox\n          placeholder=\"search for a monster...\" \n          //handleChange change the state of the component's searchField element\n          //which will then re-render the component and change filteredMonsters, \\\n          //a variable which will then be passed down to CardList component\n          handleChange={this.handleChange}/>\n        <CardList monsters={filteredMonsters}></CardList>\n      </div> \n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}